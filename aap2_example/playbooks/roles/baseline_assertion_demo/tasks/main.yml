---
- name: Read vars from baseline requirements
  include_vars:
    file: files/baseline_requirements.yml
    name: requirements

- name: Read csv file
  community.general.read_csv:
    path: roles/baseline_assertion_demo/files/user_request.csv
  register: user_request

- name: Check if Instance Type Meets Requirements
  assert:
    that:
      - user_request.list[item]['requested_aws_instance_type'] in requirements.baseline.allowed_aws_instance_type
    fail_msg: Requested Instance Type is {{ user_request.list[item]['requested_aws_instance_type'] }} and it is not permitted!
    success_msg: Requested Instance Type is {{ user_request.list[item]['requested_aws_instance_type'] }} and it is permitted
  when: user_request.list[item]['requested_aws_instance_type'] != 'n/a'
  loop: "{{ range(0, user_request.list | length) | list }}"

- name: Check if Region Meets Requirements
  assert:
    that:
      - user_request.list[item]['requested_aws_region'] in requirements.baseline.allowed_aws_region
    fail_msg: Region requested is {{ user_request.list[item]['requested_aws_region'] }} and it is not permitted!
    success_msg: Region requested is {{ user_request.list[item]['requested_aws_region'] }} and it is permitted
  when: user_request.list[item]['requested_aws_region'] != 'n/a'
  loop: "{{ range(0, user_request.list | length) | list }}"

- name: Check if Operating System Meets Requirements
  assert:
    that:
      - user_request.list[item]['requested_os_version'] in requirements.baseline.allowed_os_version
    fail_msg: Requested OS is {{ user_request.list[item]['requested_os_version'] }} and it is not permitted!
    success_msg: Requested OS is {{ user_request.list[item]['requested_os_version'] }} and it is permitted
  when: user_request.list[item]['requested_os_version'] != 'n/a'
  loop: "{{ range(0, user_request.list | length) | list }}"

- name: Check if MS-SQL server version Meets Requirements
  assert:
    that:
      - user_request.list[item]['requested_mssql_server'] in requirements.baseline.allowed_mssql_server
    fail_msg: "{{ user_request.list[item]['requested_mssql_server'] }} is not permitted!"
    success_msg: "{{ user_request.list[item]['requested_mssql_server'] }} is permitted"
  when: user_request.list[item]['requested_mssql_server'] != 'n/a'
  loop: "{{ range(0, user_request.list | length) | list }}"

- name: Check if Memory Meets Requirements
  assert:
    that:
      - user_request.list[item]['requested_mem_gb'] | int >= requirements.baseline.min_allowed_memory_gb
      - user_request.list[item]['requested_mem_gb'] | int <= requirements.baseline.max_allowed_memory_gb
    fail_msg: Memory (GiB) requested is {{ user_request.list[item]['requested_mem_gb'] }} and it is out of the allowed range!
    success_msg: Memory (GiB) requested is {{ user_request.list[item]['requested_mem_gb'] }} and it is within the allowed range
  when: user_request.list[item]['requested_mem_gb'] != 'n/a'
  loop: "{{ range(0, user_request.list | length) | list }}"

- name: Check if vCPU Meets Requirements
  assert:
    that:
      - user_request.list[item]['requested_vcpu'] | int >= requirements.baseline.min_allowed_vcpu
      - user_request.list[item]['requested_vcpu'] | int <= requirements.baseline.max_allowed_vcpu
    fail_msg: vCPU requested is {{ user_request.list[item]['requested_vcpu'] }} and it is out of the allowed range!
    success_msg: vCPU requested is {{ user_request.list[item]['requested_vcpu'] }} and it is within the allowed range
  when: user_request.list[item]['requested_vcpu'] != 'n/a'
  loop: "{{ range(0, user_request.list | length) | list }}"

- name: Check if IP Address falls within the permitted network range
  assert:
    that:
      - requirements.baseline.ip_network | ansible.netcommon.network_in_usable(user_request.list[item]['requested_ip']) == true
    fail_msg: "Requested IP Address {{ user_request.list[item]['requested_ip'] }} is outside the allowed network range of {{ requirements.baseline.ip_network}}!"
    success_msg: "Requested IP Address {{ user_request.list[item]['requested_ip'] }} is within the allowed network range of {{ requirements.baseline.ip_network }}"
  when: user_request.list[item]['requested_ip'] != 'n/a'
  loop: "{{ range(0, user_request.list | length) | list }}"
