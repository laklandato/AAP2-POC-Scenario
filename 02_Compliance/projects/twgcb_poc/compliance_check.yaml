---
#################################################
#
# code : 2_system_check.yaml
# function : check RHEL by POC rules
# author : Frank Lin (frank.lin@redhat.com)
# version : 0.1
# update : 2022/12/13
#
#################################################

### task part
- hosts: all
  gather_facts: true
  become: true
  vars:
    rule_id: "TWGCB-01-008-0129"
    rule_status: ""
    illegal_zero_uid: []
  tasks:
    - name: Include vars of rules-var.yaml for twgcb common variables
      include_vars:
        file: vars/rules-var.yaml

    - name: Include vars of twgcb-var.yaml for POC related variables
      include_vars:
        file: vars/twgcb-var.yaml

    # create default worker node status dictionary variable
    - name: create default dictionary variable
      set_fact:
        check_status:  "{{ check_status  | default({}) | combine({ item.id:check_mode[item.id] }) }}"
        check_results: "{{ check_results | default({}) | combine({ item.id:'' }) }}"
      with_items: "{{ rules }}"

    - name: set start time
      set_fact:
        var_start_time: "{{ now(fmt='%F %T %A') }}"

    # common vars
    - name: initial variables
      set_fact:
        var_status: ""
        var_result: ""
        

    # rule TWGCB-01-008-0129
    # check modprobe tipc disabled
    - name: initial variables
      set_fact:
        illegal_accounts: []
        rule_id: "TWGCB-01-008-0129"
        rule_status: "{{ check_mode[rule_id] }}"

    - name: initial variables
      set_fact:
        var_status: "{{ (rule_status == commons.check_mode.by_pass) | ternary(commons.check_status.by_pass, '') }}"
        var_result: "{{ (rule_status == commons.check_mode.by_pass) | ternary('N/A', '') }}"

    - name: check block
      block:
        - name: check modprobe
          shell: >
            modprobe -c | grep 'blacklist tipc'
          register: result
          ignore_errors: true

        - name: parse result - FAIL
          set_fact:
            var_status: "{{ commons.check_status.fail }}"
            var_result: |
              FAILED : modprobe tipc enabled
          when: 
            - result is defined
            - result.rc == 1
            - result.stdout | default('', true) | trim == ""

        - name: parse result - PASS
          set_fact:
            var_status: "{{ commons.check_status.pass }}"
            var_result: |
              PASS : modprobe tipc disabled
          when:
            - result is defined
            - result.rc == 0
            - result.stdout | default('', true) | trim != ""

      when:
        - rule_status == commons.check_mode.do_check

    - name: Pass check results to role
      include_role:
        name: util/check/update_result
      vars:
        rule_status: "{{ var_status }}"
        rule_result: "{{ var_result }}"

    # end rule TWGCB-01-008-0129

    # rule TWGCB-01-008-0130
    # check radio interface disabled
    - name: initial variables
      set_fact:
        illegal_accounts: []
        rule_id: "TWGCB-01-008-0130"
        rule_status: "{{ check_mode[rule_id] }}"

    - name: initial variables
      set_fact:
        var_status: "{{ (rule_status == commons.check_mode.by_pass) | ternary(commons.check_status.by_pass, '') }}"
        var_result: "{{ (rule_status == commons.check_mode.by_pass) | ternary('N/A', '') }}"
        var_result_str: []
        var_wifi_enabled: true
        var_wwan_enabled: true
    
    - name: check block
      block:
        - name: check radio wifi
          shell: >
            nmcli radio wifi
          register: result
          ignore_errors: true

        - name: parse result
          set_fact:
            var_wifi_enabled: false
          when: 
            - result is defined
            - result.rc == 0
            - result.stdout | default('', true) | trim != ""
            - result.stdout == "disabled"

        - name: check radio wifi
          shell: >
            nmcli radio wwan
          register: result
          ignore_errors: true

        - name: parse result
          set_fact:
            var_wwan_enabled: false
          when: 
            - result is defined
            - result.rc == 0
            - result.stdout | default('', true) | trim != ""
            - result.stdout == "disabled"
        
        - name: parse result - FAIL
          set_fact:
            var_status: "{{ commons.check_status.fail }}"
            var_result_str: "{{ var_result_str }} + [ 'FAILED : radio wifi enabled' ]"
          when: 
            - var_wifi_enabled == true

        - name: parse result - FAIL
          set_fact:
            var_status: "{{ commons.check_status.fail }}"
            var_result_str: "{{ var_result_str }} + [ 'FAILED : radio wwan enabled' ]"
          when: 
            - var_wwan_enabled == true

        - name: format final result
          set_fact:
            var_result: "{{ var_result_str | join('\n') }}"
            
        - name: parse result - PASS
          set_fact:
            var_status: "{{ commons.check_status.pass }}"
            var_result: |
              PASS : radio wifi disabled
              PASS : radio wwan diabled
          when: 
            - var_wifi_enabled == false
            - var_wwan_enabled == false
      when:
        - rule_status == commons.check_mode.do_check

    - name: Pass check results to role
      include_role:
        name: util/check/update_result
      vars:
        rule_status: "{{ var_status }}"
        rule_result: "{{ var_result }}"

    # end rule TWGCB-01-008-0130

    # rule TWGCB-01-008-0131
    # check interface promisc mode disabled
    - name: initial variables
      set_fact:
        illegal_accounts: []
        rule_id: "TWGCB-01-008-0131"
        rule_status: "{{ check_mode[rule_id] }}"

    - name: initial variables
      set_fact:
        var_status: "{{ (rule_status == commons.check_mode.by_pass) | ternary(commons.check_status.by_pass, '') }}"
        var_result: "{{ (rule_status == commons.check_mode.by_pass) | ternary('N/A', '') }}"
        var_result_str: []

    - name: check block
      block:
        - name: check promisc mode
          shell: >
            "ip link | grep -i promisc"
          register: result
          ignore_errors: true

        - name: parse result - FAIL
          set_fact:
            var_status: "{{ commons.check_status.fail }}"
            var_result: |
              FAILED : interface in promisc mode
          when: 
            - result is defined
            - result.rc == 0
            - result.stdout | default('', true) | trim != ""
            
        - name: parse result - PASS
          set_fact:
            var_status: "{{ commons.check_status.pass }}"
            var_result: |
              PASS : interface not in promisc mode
          when: 
            - result is defined
            - result.rc == 1
            - result.stdout | default('', true) | trim == ""
      when:
        - rule_status == commons.check_mode.do_check

    - name: Pass check results to role
      include_role:
        name: util/check/update_result
      vars:
        rule_status: "{{ var_status }}"
        rule_result: "{{ var_result }}"

    # end rule TWGCB-01-008-0131

    - name: set end time
      set_fact:
        var_end_time: "{{ now(fmt='%F %T %A') }}"

    - name: Create reports
      become: no
      template:
        src: check_report.html.j2
        dest: "/tmp/{{ inventory_hostname }}_check_report.html"
        mode: '0644'
      delegate_to: 192.168.8.104

...
