---
#################################################
#
# code : 2_system_check.yaml
# function : check RHEL by CTBC rules
# author : Howard Wu (howwu@redhat.com)
# author : Leo Chen (weijchen@redhat.com)
# version : 0.1
# update : 2022/02/10
#
#################################################

### task part
- hosts: all
  gather_facts: true
  become: true
  vars:
    rule_id: "TWGCB-01-008-0075"
    rule_status: ""
    illegal_zero_uid: []
  tasks:
    - name: Include vars of rules-var.yaml for twgcb common variables
      include_vars:
        file: vars/rules-var.yaml

    - name: Include vars of ctbc-var.yaml for CTBC related variables
      include_vars:
        file: vars/ctbc-var.yaml

    # create default worker node status dictionary variable
    - name: create default dictionary variable
      set_fact:
        check_status:  "{{ check_status  | default({}) | combine({ item.id:check_mode[item.id] }) }}"
        check_results: "{{ check_results | default({}) | combine({ item.id:'' }) }}"
      with_items: "{{ rules }}"

    - name: set start time
      set_fact:
        var_start_time: "{{ now(fmt='%F %T %A') }}"

    # common vars
    - name: initial variables
      set_fact:
        var_status: ""
        var_result: ""
        

    # rule 75
    # check account name starts wihh + in /etc/passwd
    - name: initial variables
      set_fact:
        illegal_accounts: []
        rule_id: "TWGCB-01-008-0075"
        rule_status: "{{ check_mode[rule_id] }}"

    - name: check account name starts wihh '+' in /etc/passwd
      block:
        - name: check account name starts wihh +
          shell: >
            grep '^\+' /etc/passwd
          register: result
          ignore_errors: true

        - debug:
            var: result

        - name: check accounts
          set_fact:
            illegal_accounts: "{{ illegal_accounts + [ item ] }}"
          when: 
            - result is defined
            - result.rc == 0
            - result.stdout | default('', true) | trim != ""
          with_items:
            - "{{result.stdout_lines}}"

        - name: parse result - PASS
          set_fact:
            var_status: "{{ commons.check_status.pass }}"
            var_result: |
              PASS => no account name starts with + in /etc/passwd
          when: 
            - result is defined
            - illegal_accounts is defined
            - illegal_accounts | length == 0

        - name: parse result - FAIL
          set_fact:
            var_status: "{{ commons.check_status.fail }}"
            var_result: |
              FAILED => account {{illegal_accounts}} found starts with + in /etc/passwd
          when: 
            - result is defined
            - illegal_accounts is defined
            - illegal_accounts | length > 0

      when:
        - rule_status == commons.check_mode.do_check

    - name: set result to check_status and check_results dictionary variables
      set_fact:
        check_status:  "{{ check_status  | default({}) | combine({ rule_id : var_status }) }}"
        check_results: "{{ check_results | default({}) | combine({ rule_id : var_result }) }}"
    # end rule 75

    # rule 76
    # check account name starts with + in /etc/shadow
    - name: initial variables
      set_fact:
        var_status: ""
        var_result: ""
        illegal_accounts: []
        rule_id: "TWGCB-01-008-0076"
        rule_status: "{{ check_mode[rule_id] }}"

    - name: check block
      block:
        - name: check account name starts with +
          shell: >
            grep '^\+' /etc/shadow
          register: result
          ignore_errors: true

        - debug:
            var: result

        - name: check accounts
          set_fact:
            illegal_accounts: "{{ illegal_accounts + [ item ] }}"
          when: 
            - result is defined
            - result.rc == 0
            - result.stdout | default('', true) | trim != ""
          with_items:
            - "{{result.stdout_lines}}"

        - name: parse result - PASS
          set_fact:
            var_status: "{{ commons.check_status.pass }}"
            var_result: |
              PASS => no account name starts with + in /etc/shadow
          when: 
            - result is defined
            - illegal_accounts is defined
            - illegal_accounts | length == 0

        - name: parse result - FAIL
          set_fact:
            var_status: "{{ commons.check_status.fail }}"
            var_result: |
              FAILED => account {{illegal_accounts}} found starts with + in /etc/shadow
          when: 
            - result is defined
            - illegal_accounts is defined
            - illegal_accounts | length > 0
      when:
        - rule_status == commons.check_mode.do_check

    - name: set result to check_status and check_results dictionary variables
      set_fact:
        check_status:  "{{ check_status  | default({}) | combine({ rule_id : var_status }) }}"
        check_results: "{{ check_results | default({}) | combine({ rule_id : var_result }) }}"
    # end rule 76

    # rule 78
    # check 0 uid
    - name: initial variables
      set_fact:
        var_status: ""
        var_result: ""
        rule_id: "TWGCB-01-008-0078"
        rule_status: "{{ check_mode[rule_id] }}"

    - name: check block
      block:
        - name: check 0 uid
          shell: >
            awk -F: '($3 == 0) { print $1 }' /etc/passwd
          register: result
          ignore_errors: true

        - debug:
            var: result

        - name: check accounts
          set_fact:
            illegal_zero_uid: "{{ illegal_zero_uid + [ item ] }}"
          when: 
            - result is defined
            - result.rc == 0
            - result.stdout | default('', true) | trim != ""
            - item not in customer.zero_uid
          with_items:
            - "{{result.stdout_lines}}"

        - name: parse result - PASS
          set_fact:
            var_status: "{{ commons.check_status.pass }}"
            var_result: |
              PASS => no user with uid == 0 except {{ customer.zero_uid }}
          when: 
            - result is defined
            - result.rc == 0
            - illegal_zero_uid | length == 0

        - name: parse result - FAIL
          set_fact:
            var_status: "{{ commons.check_status.fail }}"
            var_result: |
              FAILED =>
              account {{illegal_zero_uid}} found with uid 0
          when: 
            - result is defined
            - result.rc == 0
            - illegal_zero_uid is defined
            - illegal_zero_uid | length > 0
      when:
        - rule_status == commons.check_mode.do_check

    - name: set result to check_status and check_results dictionary variables
      set_fact:
        check_status:  "{{ check_status  | default({}) | combine({ rule_id : var_status }) }}"
        check_results: "{{ check_results | default({}) | combine({ rule_id : var_result }) }}"
    # end rule 78

    - name: set end time
      set_fact:
        var_end_time: "{{ now(fmt='%F %T %A') }}"

    - name: Create reports
      become: no
      template:
        src: check_report.html.j2
        dest: "/tmp/{{ inventory_hostname }}_check_report.html"
        mode: '0644'
      delegate_to: 192.168.8.104

...
