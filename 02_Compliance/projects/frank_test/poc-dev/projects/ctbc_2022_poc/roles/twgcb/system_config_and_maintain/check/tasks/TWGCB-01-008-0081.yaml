---
#
# TWGCB-01-008-0081
#

# check step
# 1. check user home dir group
- name: initial variables
  set_fact:
    var_status: "{{ (rule_status == commons.check_mode.by_pass) | ternary(commons.check_status.by_pass, '') }}"
    var_result: "{{ (rule_status == commons.check_mode.by_pass) | ternary('N/A', '') }}"

# - debug:
#     msg: "{{ rule_id + ':' + rule_status + ':' + var_status + ':' + var_result }}"

- name: check block
  block:
    - name: check user home dir group
      shell: >
        grep -E -v '^(halt|sync|shutdown)' /etc/passwd | awk -F: '($7 != "'"$(which nologin)"'" && $7 != "/bin/false" && $3 >= 1000 && $1 != "nobody") { print $1 " " $4 " " $6 }' | while read user gid dir; do
          if [ ! -d "$dir" ]; then
            echo "The home directory ($dir) of user $user does not exist."
          else
            owner=$(stat -L -c "%g" "$dir")
            if [ "$owner" != "$gid" ]; then
          echo "The home directory ($dir) of group $gid is owned by group $owner."
          fi
        fi
        done
      register: result
      ignore_errors: true

    - debug:
        var: result

    - name: parse result - PASS
      set_fact:
        var_status: "{{ commons.check_status.pass }}"
        var_result: |
          PASS => all home dir group correct.
      when: 
        - result is defined
        - result.rc == 0
        - result.stdout | default('', true) | trim == ""
    
    - name: parse result - FAIL
      set_fact:
        var_status: "{{ commons.check_status.fail }}"
        var_result: |
          FAILED =>
          {{ result.stdout }}
      when: 
        - result is defined
        - result.rc == 0
        - result.stdout | default('', true) | trim != ""

    # - debug:
    #     msg: "after in {{ rule_id + ':' + var_status + ':' + var_result }}"

  when:
    - rule_status == commons.check_mode.do_check

# - debug:
#     msg: "after {{ rule_id + ':' + var_status + ':' + var_result }}"

- name: Pass check results to role
  include_role:
    name: util/check/update_result
  vars:
    rule_status: "{{ var_status }}"
    rule_result: "{{ var_result }}"
...