---
#
# TWGCB-01-008-0042
#

# check step
# 1. check core dump feature
- name: initial variables
  set_fact:
    var_status: "{{ (rule_status == commons.check_mode.by_pass) | ternary(commons.check_status.by_pass, '') }}"
    var_result: "{{ (rule_status == commons.check_mode.by_pass) | ternary('N/A', '') }}"

# - debug:
#     msg: "{{ rule_id + ':' + rule_status + ':' + var_status + ':' + var_result }}"

- name: check block
  block:
    - name: check kernel.randomize_va_space
      shell: >
        c1=$(ulimit -c);
        c2=$(sysctl -n fs.suid_dumpable)
        c3=$(cat /etc/systemd/coredump.conf | grep "Storage=none")
        c4=$(cat /etc/systemd/coredump.conf | grep "ProcessSizeMax=0")

        if [[ $c1 != "0" ]]; then
          echo "FAILED => ulimit -c => $c1"
        else
          echo "PASS => ulimit -c = 0"
        fi

        if [[ $c2 != "0" ]]; then
          echo "FAILED => sysctl -n fs.suid_dumpable => $c2"
        else
          echo "PASS => sysctl -n fs.suid_dumpable = 0"
        fi

        if [[ $c3 == "" ]]; then
          echo "FAILED => Storage=none not configured in /etc/systemd/coredump.conf"
        else
          echo "PASS => Storage=none configured in /etc/systemd/coredump.conf"
        fi

        if [[ $c4 == "" ]]; then
          echo "FAILED => ProcessSizeMax=0 not configured in /etc/systemd/coredump.conf"
        else
          echo "PASS => ProcessSizeMax=0 configured in /etc/systemd/coredump.conf"
        fi
      register: result
      ignore_errors: true

    - debug:
        var: result

    - name: parse result - PASS
      set_fact:
        var_status: "{{ commons.check_status.pass }}"
        var_result: |
          {{ result.stdout }}
      when: 
        - result is defined
        - result.rc == 0
        - result.stdout.find("FAILED") == -1
    
    - name: parse result - FAIL
      set_fact:
        var_status: "{{ commons.check_status.fail }}"
        var_result: |
          {{ result.stdout }}
      when: 
        - result is defined
        - result.rc == 0
        - result.stdout.find("FAILED") != -1

    # - debug:
    #     msg: "after in {{ rule_id + ':' + var_status + ':' + var_result }}"

  when:
    - rule_status == commons.check_mode.do_check

# - debug:
#     msg: "after {{ rule_id + ':' + var_status + ':' + var_result }}"

- name: Pass check results to role
  include_role:
    name: util/check/update_result
  vars:
    rule_status: "{{ var_status }}"
    rule_result: "{{ var_result }}"
...